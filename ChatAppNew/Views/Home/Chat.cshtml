@model ChatAppNew.ViewModels.ChatViewModel
@using System.Security.Claims
@{
    ViewData["Title"] = "Chat";
    var userId = User.FindFirst(ClaimTypes.NameIdentifier).Value;
    var singlePageList = "";



}

<link href="~/css/Chat.css" rel="stylesheet" />
<h2>@ViewBag.numbers</h2>

<div class="messaging">
    <div class="inbox_msg">
        <div class="inbox_people">
            <div class="headind_srch">
                <div class="recent_heading">
                    <h4>Recent</h4>
                </div>
                <div class="srch_bar">
                    <div class="stylish-input-group">
                        <input type="text" class="search-bar" id="Search-barRecent" placeholder="Search">
                    </div>
                </div>
            </div>
            <div class="inbox_chat scroll">
                @foreach (var chat in Model.Chats)
                {

                    <div class="chat_list active_chat" id="RecentUser" onclick="callChat(@chat.Id)">
                        <div class="chat_people">
                            <div class="chat_img"> <img src="https://ptetutorials.com/images/user-profile.png" alt="sunil"> </div>
                            <div class="chat_ib">

                                @*<a asp-action="Chat" asp-controller="Home" asp-route-id="@chat.Id">
                                        @chat.Users.FirstOrDefault(x => x.UserId != userId).Users.Name
                                    </a>*@
                                <a  >
                                    @chat.Users.FirstOrDefault(x => x.UserId != userId).Users.Name
                                </a>


                                <p>
                                    Test, which is a new approach to have all solutions
                                    astrology under one roof.
                                </p>
                            </div>
                        </div>
                    </div>

                }
                <hr />
                <div class="headind_srch">
                    <div class="recent_heading">
                        <h4>All Users</h4>
                    </div>
                    <div class="srch_bar">
                        <div class="stylish-input-group">
                            <input type="text" class="search-bar" id="search-bar" placeholder="Search">
                        </div>
                    </div>
                </div>
                @foreach (var user in Model.Users)
                {

                    <div class="chat_list" id="AllUser">
                        <div class="chat_people">
                            <div class="chat_img"> <img src="https://ptetutorials.com/images/user-profile.png" alt="sunil"> </div>
                            <div class="chat_ib" id="Name">

                                <a asp-action="CreatePrivateRoom" asp-controller="Home" asp-route-userId="@user.Id">@user.Name</a>
                                <p>
                                    Test, which is a new approach to have all solutions
                                    astrology under one roof.
                                </p>
                            </div>
                        </div>
                    </div>

                }

            </div>

        </div>

        @if (Model.Chat != null)
        {


            <input type="hidden"  id="messageList"/>

            <div class="mesgs" id="mesgs">
                <div class="message-header">

                    <h2>
                        <div class="incoming_msg_img"> <img src="https://ptetutorials.com/images/user-profile.png" alt="sunil"> </div>
                        <a asp-action="Chat" asp-controller="Home" asp-route-id="@ViewBag.ChatId">
                            @ViewBag.reciverName
                        </a>
                    </h2>
                </div>

                <div class="msg_history" id="msg_history">


                    @foreach (var message in Model.Chat.Messages)
                    {


                        @if (message.UserId == User.FindFirst(ClaimTypes.NameIdentifier).Value)
                        {


                            <div class="outgoing_msg">
                                <div class="sent_msg">
                                    <header>@message.Name</header>
                                    <p>
                                        @message.Text
                                    </p>
                                    <span class="time_date"> @message.newDate</span>
                                </div>
                            </div>


                        }
                        else
                        {


                            <div class="incoming_msg">
                                <div class="incoming_msg_img"> <img src="https://ptetutorials.com/images/user-profile.png" alt="sunil"> </div>
                                <div class="received_msg">
                                    <div class="received_withd_msg">
                                        <header>@message.Name</header>
                                        <p>
                                            @message.Text
                                        </p>
                                        <span class="time_date">@message.newDate</span>
                                    </div>
                                </div>
                            </div>

                        }



                    }


                </div>
                <form method="post" asp-action="CreateMessage" onsubmit="sendMessage(event)" id="form">
                    <div class="type_msg">
                        <div class="input_msg_write">
                            <input type="hidden" name="roomId" value="@Model.Chat.Id" />
                            <input type="text" name="message" class="write_msg" id="msgInput" placeholder="Type a message" />
                            <button class="msg_send_btn" type="submit"><i class="fa fa-paper-plane" aria-hidden="true"></i></button>
                        </div>
                    </div>
                </form>


            </div>
        }
        else
        {
            <h2>Please choose any chat</h2>
        }

    </div>
</div>



<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
@if (Model.Chat != null)
{
    <script>



        "use strict"
        var connection = new signalR.HubConnectionBuilder().withUrl('/chatHub').build();
        var _connectionId = "";
        connection.on("RecieveMessage", function (data) {



            console.log(data);
            var form = document.getElementById("form")
            var userId = "@User.FindFirst(ClaimTypes.NameIdentifier).Value"

            var div1 = document.createElement("div");

            var div2 = document.createElement("div");
            var div3 = document.createElement("div");
            var div4 = document.createElement("div");
            var end = document.querySelector(".msg_history")




            var header = document.createElement("header");
            header.appendChild(document.createTextNode(data.name));
            var p = document.createElement("p");
            p.appendChild(document.createTextNode(data.text))
            var span = document.createElement("span");
            var time = new Date(data.timeStamp).toLocaleString();
            span.appendChild(document.createTextNode(time))



            if (userId == data.userId) {
                div2.appendChild(header);
                div2.appendChild(p);
                div2.appendChild(span);
                div1.appendChild(div2);
                div1.classList.add("outgoing_msg");
                div2.classList.add("sent_msg");
                span.classList.add("time_date")

                /* end.insertBefore(div1, form);*/
                end.appendChild(div1)
            }
            else {


                div4.appendChild(header);
                div4.appendChild(p);
                div4.appendChild(span);
                div3.appendChild(div4);
                div1.appendChild(div2);
                div1.appendChild(div3);

                div1.classList.add("incoming_msg");
                div2.classList.add("incoming_msg_img");
                div3.classList.add("received_msg");
                div4.classList.add("received_withd_msg");
                span.classList.add("time_date");

                end.appendChild(div1);

            }

            var messageBodyInner1 = document.querySelector('#msg_history');

        messageBodyInner1.scrollTop = messageBodyInner1.scrollHeight - messageBodyInner1.clientHeight;
        console.log(messageBodyInner1.clientHeight);







        })


        var joinRoom = function () {
            var url = '/Chat/JoinRoom/' + _connectionId + '/@Model.Chat.Id'
            axios.post(url, null)
                .then(res => console.log("Room joined!!", res))
                .catch(err => console.log("Failed to join Room!", err))
        }
        connection.start().then(function () {
            connection.invoke("getConnectionId").then(function (connectionId) {
                _connectionId = connectionId;
                console.log(_connectionId);

                    joinRoom();




            })
            console.log("Connection start");


        }).catch(function (err) {
            console.error('Unable to join', err);
        })

        var sendMessage = function (event) {
            event.preventDefault();

            var data = new FormData(event.target);
            axios.post('/Chat/SendMessage', data)
                .then(res => console.log("Message sent..."))
                .catch(err => console.error("Failed to sent message!!", err));
            document.getElementById('msgInput').value = "";

            var messageBodyInner = document.querySelector('#msg_history');
            messageBodyInner.scrollTop = messageBodyInner.scrollHeight - messageBodyInner.clientHeight;



        }
        var messageBody = document.querySelector('#msg_history');
        messageBody.scrollTop = messageBody.scrollHeight - messageBody.clientHeight;
        console.log(messageBody.scrollTop);


  



    </script>
}
<script>
   
    var callChat = (id) => {
       


            $.ajax({
                url: "/Home/Chat/",
                data: {
                    "id": id
                },
                type: "GET",
                success: function (response) {
                    window.location="https://localhost:44381/Home/Chat/"+response.id;
                    var chatId = response.id;
                    console.log(chatId);
                   /* window.location.assign("https://localhost:44381/Home/Chat/" + chatId);*/

                   

                }
            })
        }




    $(function () {

        $("#search-bar").keyup(function (e) {

            var value = $(this).val().toLowerCase();
            $("#AllUser*").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });

        });


        $("#Search-barRecent").keyup(function (e) {

            var value = $(this).val().toLowerCase();
            $("#RecentUser*").filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
        });


    });
</script>

